package com.ibm.training.bootcamp.rest.sample01.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.hsqldb.jdbc.JDBCDataSource;
import com.ibm.training.bootcamp.rest.sample01.domain.TripSched;

public class TripSchedJdbcDaoImpl implements TripSchedDao {
	private static TripSchedJdbcDaoImpl INSTANCE;

	private JDBCDataSource dataSource;

	static public TripSchedJdbcDaoImpl getInstance() {

		TripSchedJdbcDaoImpl instance;
		if (INSTANCE != null) {
			instance = INSTANCE;
		} else {
			TruckJdbcDaoImpl.getInstance();
			instance = new TripSchedJdbcDaoImpl();
			INSTANCE = instance;
		}

		return instance;
	}

	private TripSchedJdbcDaoImpl() {
		init();
	}

	private void init() {
		dataSource = new JDBCDataSource();
		dataSource.setDatabase("jdbc:hsqldb:mem:TRUSYS");
		dataSource.setUser("username");
		dataSource.setPassword("password");

		createTripSchedTable();
		insertInit();

	}

	private void createTripSchedTable() {
		String createTripSchedSql = "CREATE TABLE TRIPSCHED "
				+ "(tripId INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, "
				+ " truckId INTEGER FOREIGN KEY REFERENCES TRUCK(id), " + " driverName VARCHAR(255), "
				+ " loadWeight INTEGER, " + " dtStart DATE, " + " dtStarttime TIME, "  + " dtEnd DATE, " 
				+ " dtEndtime TIME, "  + " status VARCHAR(255))";

		try (Connection conn = dataSource.getConnection(); Statement stmt = conn.createStatement()) {

			stmt.executeUpdate(createTripSchedSql);

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	private void insertInit() {
		
		Date dt1 = Date.valueOf("2019-04-20");
		Date dt2 = Date.valueOf("2019-04-21");
		Date dt3 = Date.valueOf("2019-04-22");
		Date dt4 = Date.valueOf("2019-04-23");
		Date dt5 = Date.valueOf("2019-04-24");
		Date dt6 = Date.valueOf("2019-04-25");
		
		Time t1 = Time.valueOf("01:00:00");
		Time t2 = Time.valueOf("03:00:00");
		Time t3 = Time.valueOf("05:00:00");
		Time t4 = Time.valueOf("11:30:00");
		Time t5 = Time.valueOf("13:40:00");
		Time t6 = Time.valueOf("15:00:00");
		

		add(new TripSched((long) 2, "Ezra", 500, dt1, t1, dt4, t4, "Ready"));
		add(new TripSched((long) 3, "Jay", 1000, dt2, t2, dt5, t5, "In Transit"));
		add(new TripSched((long) 1, "Bob", 1500, dt3, t3, dt6, t6, "Arrived"));
	}

	private String createSearchValue(String string) {

		String value;

		if (StringUtils.isBlank(string)) {
			value = "%";
		} else {
			value = string;
		}

		return value;
	}

	private String createSearchValue1(int string) {

		String value;
		
		if (string==0) {
 			value = "[0-9]%";
		} else {
			value = Integer.toString(string);
		}

		return value;
	}


	@Override
	public TripSched find(Long tripId) {
		TripSched tripsched = null;

		if (tripId != null) {
			String sql = "SELECT * FROM TRIPSCHED INNER JOIN TRUCK ON TRIPSCHED.TRUCKID = TRUCK.ID WHERE TRIPSCHED.TRIPID = ?";
			try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {

				ps.setInt(1, tripId.intValue());
				ResultSet results = ps.executeQuery();

				if (results.next()) {
					tripsched = new TripSched(Long.valueOf(results.getInt("tripId")),
							Long.valueOf(results.getInt("truckId")), results.getString("driverName"),
							results.getInt("loadWeight"), results.getDate("dtStart"), results.getTime("dtStarttime"),
							results.getDate("dtEnd"), results.getTime("dtEndtime"),	results.getString("status"));
				}

			} catch (SQLException e) {
				e.printStackTrace();
				throw new RuntimeException(e);
			}
		}

		return tripsched;

	}

	@Override
	public List<TripSched> findByName(Long truckId, String driverName, String status) {
		List<TripSched> tripscheds = new ArrayList<>();

		String sql = "SELECT * FROM TRIPSCHED INNER JOIN TRUCK ON TRIPSCHED.TRUCKID = TRUCK.ID WHERE TRUCK.ID LIKE ? OR TRIPSCHED.DRIVERNAME LIKE ? OR TRIPSCHED.STATUS LIKE ?";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
			ps.setString(1, createSearchValue1(truckId.intValue()));
			ps.setString(2, createSearchValue(driverName));
			ps.setString(3, createSearchValue(status));

			ResultSet results = ps.executeQuery();

			while (results.next()) {
				TripSched tripsched = new TripSched(Long.valueOf(results.getInt("tripId")),
						Long.valueOf(results.getInt("truckId")), results.getString("driverName"),
						results.getInt("loadWeight"), results.getDate("dtStart"), results.getTime("dtStarttime"),
						results.getDate("dtEnd"), results.getTime("dtEndtime"),	results.getString("status"));
				tripscheds.add(tripsched);
			}

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}

		return tripscheds;
	}

	public void add(TripSched tripsched) {
		String insertSql = "INSERT INTO TRIPSCHED (truckId, driverName, loadWeight, dtStart, dtStarttime, dtEnd, dtEndtime, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(insertSql)) {
			ps.setLong(1, tripsched.getTruckId());
			ps.setString(2, tripsched.getDriverName());
			ps.setInt(3, tripsched.getLoadWeight());
			ps.setDate(4, tripsched.getDtStart());
			ps.setTime(5, tripsched.getDtStarttime());
			ps.setDate(6, tripsched.getDtEnd());
			ps.setTime(7, tripsched.getDtEndtime());
			ps.setString(8, tripsched.getStatus());
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}

	}

	@Override
	public void update(TripSched tripsched) {
		String updateSql = "UPDATE tripsched SET truckId = ?, driverName = ?, loadWeight = ?, dtStart = ?, dtStarttime = ?, dtEnd = ?, dtEndtime = ?, status = ? WHERE tripId = ?";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(updateSql)) {

			ps.setLong(1, tripsched.getTruckId());
			ps.setString(2, tripsched.getDriverName());
			ps.setInt(3, tripsched.getLoadWeight());
			ps.setDate(4, tripsched.getDtStart());
			ps.setTime(5, tripsched.getDtStarttime());
			ps.setDate(6, tripsched.getDtEnd());
			ps.setTime(7, tripsched.getDtEndtime());
			ps.setString(8, tripsched.getStatus());
			ps.setLong(9, tripsched.getTripId());
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}

	}

	@Override
	public void delete(Long tripId) {
		String updateSql = "DELETE FROM tripsched WHERE tripId = ?";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(updateSql)) {

			ps.setLong(1, tripId);
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	@Override
	public List<TripSched> findAll() {
		return findByName((long) 0, null, null);
	}

}
