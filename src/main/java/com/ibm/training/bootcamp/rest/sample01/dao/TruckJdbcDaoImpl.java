package com.ibm.training.bootcamp.rest.sample01.dao;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.hsqldb.jdbc.JDBCDataSource;
import com.ibm.training.bootcamp.rest.sample01.domain.Truck;

public class TruckJdbcDaoImpl implements TruckDao {
	private static TruckJdbcDaoImpl INSTANCE;

	private JDBCDataSource dataSource;

	static public TruckJdbcDaoImpl getInstance() {

		TruckJdbcDaoImpl instance;
		if (INSTANCE != null) {
			instance = INSTANCE;
		} else {
			instance = new TruckJdbcDaoImpl();
			INSTANCE = instance;
		}

		return instance;
	}

	private TruckJdbcDaoImpl() {
		init();
	}

	private void init() {
		dataSource = new JDBCDataSource();
		dataSource.setDatabase("jdbc:hsqldb:mem:TRUSYS");
		dataSource.setUser("username");
		dataSource.setPassword("password");

		createTruckTable();
		insertInit();

	}

	private void createTruckTable() {
		String createTruckSql = "CREATE TABLE TRUCK " + "(id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, " + " model VARCHAR(255), "
				+ " licenseno VARCHAR(255), " + " weight INTEGER, " + " capacity INTEGER, "+ " dateacq DATE)";
		
		try (Connection conn = dataSource.getConnection(); Statement stmt = conn.createStatement()) {

			stmt.executeUpdate(createTruckSql);

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	private void insertInit() {
		
		add(new Truck("Hyundai", "ABC012", 123, 456, new Date(04-20-2019)));
		add(new Truck("Isuzu", "DEF345", 123, 456, new Date (04-20-2019)));
		add(new Truck("Honda", "GHI678", 234, 567, new Date (04-20-2019)));
		
	}

	@Override
	public List<Truck> findAll() {
		return findByName(null, null, 0, 0);
	}
	
	@Override
	public Truck find(Long id) {

		Truck truck = null;

		if (id != null) {
			String sql = "SELECT * FROM TRUCK where id = ?";
			try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {

				ps.setInt(1, id.intValue());
				ResultSet results = ps.executeQuery();

				if (results.next()) {
					truck = new Truck(Long.valueOf(results.getInt("id")), results.getString("model"),
							results.getString("licenseno"), results.getInt("weight"), results.getInt("capacity"), 
							results.getDate("dateacq"));
				}

			} catch (SQLException e) {
				e.printStackTrace();
				throw new RuntimeException(e);
			}
		}

		return truck;
	}

	
	@Override
	public List<Truck> findByName(String model, String licenseno, int weight, int capacity) {
		List<Truck> trucks = new ArrayList<>();

		String sql = "SELECT * FROM TRUCK WHERE model LIKE ? OR licenseno LIKE ? OR weight LIKE ? OR capacity LIKE ?";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {

			ps.setString(1, createSearchValue(model));
			ps.setString(2, createSearchValue(licenseno));
			ps.setString(3, createSearchValue1(weight));
			ps.setString(4, createSearchValue1(capacity));
			
			ResultSet results = ps.executeQuery();

			while (results.next()) {
				Truck truck = new Truck(Long.valueOf(results.getInt("id")), results.getString("model"),
						results.getString("licenseno"), results.getInt("weight"), results.getInt("capacity"), 
						results.getDate("dateacq"));
				trucks.add(truck);
			}

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}

		return trucks;
	}

	private String createSearchValue(String string) {

		String value;

		if (StringUtils.isBlank(string)) {
			value = "%";
		} else {
			value = string;
		}

		return value;
	}

	private String createSearchValue1(int string) {

		String value;
		
		if (string==0) {
 			value = "[0-9]%";
		} else {
			value = Integer.toString(string);
		}

		return value;
	}

	@Override
	public void add(Truck truck) {
		
		String insertSql = "INSERT INTO TRUCK (model, licenseno, weight, capacity, dateacq) VALUES (?, ?, ?, ?, ?)";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(insertSql)) {

			ps.setString(1, truck.getModel());
			ps.setString(2, truck.getLicenseno());
			ps.setInt(3, truck.getWeight());
			ps.setInt(4, truck.getCapacity());
			ps.setDate(5, truck.getDateacq());
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void update(Truck truck) {
		String updateSql = "UPDATE truck SET model = ?, licenseno = ?, weight = ?, capacity = ?, dateacq = ? WHERE id = ?";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(updateSql)) {

			ps.setString(1, truck.getModel());
			ps.setString(2, truck.getLicenseno());
			ps.setInt(3, truck.getWeight());
			ps.setInt(4, truck.getCapacity());
			ps.setDate(5, truck.getDateacq());
			ps.setLong(6, truck.getId());
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	@Override
	public void delete(Long id) {
		String deleteSql = "DELETE FROM truck WHERE id = ?";

		try (Connection conn = dataSource.getConnection(); PreparedStatement ps = conn.prepareStatement(deleteSql)) {

			ps.setLong(1, id);
			ps.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}
	
}